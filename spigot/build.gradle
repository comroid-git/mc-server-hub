plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "de.undercouch.download" version "5.5.0"
}

group = 'org.comroid.mcsd'
version = '0.1.0-SNAPSHOT'

sourceSets {
    main.java.srcDirs       = files(parent.projectDir.toString() + "/src/spigot/main/java")
    main.resources.srcDirs  = files(parent.projectDir.toString() + "/src/spigot/main/resources")
    test.java.srcDirs       = files(parent.projectDir.toString() + "/src/spigot/test/java")
    test.resources.srcDirs  = files(parent.projectDir.toString() + "/src/spigot/test/java")
}

tasks.register('dlServerJar', Download).configure {
    src 'https://github.com/IzzelAliz/Arclight/releases/download/Net%2F1.0.1/arclight-forge-1.20.2-1.0.1.jar'
    //src 'https://serverjars.com/api/fetchJar/servers/paper/1.19.4'
    dest "${buildDir}/libs/"
}

tasks.register('serverJar', Copy) {
    dependsOn dlServerJar, shadowJar
    from dlServerJar.outputs.files.singleFile
    into "$projectDir/run"
    rename { "server.jar" }
}

tasks.register('testPlugin', Copy).configure {
    dependsOn shadowJar
    from shadowJar.outputs.files.singleFile
    into "${projectDir}/run/plugins"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT'

    // mcsd api
    implementation project(':api')
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}
