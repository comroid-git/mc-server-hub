plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.0.+'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'org.comroid.mcsd'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

sourceSets {
    main.java.srcDirs       = files(parent.projectDir.toString() + "/src/core/main/java")
    main.resources.srcDirs  = files(parent.projectDir.toString() + "/src/core/main/resources")
    test.java.srcDirs       = files(parent.projectDir.toString() + "/src/core/test/java")
    test.resources.srcDirs  = files(parent.projectDir.toString() + "/src/core/test/java")
}

tasks.register('gitCommitResource') {
    def currentCommitHash = 'git rev-parse HEAD'.execute().text.trim()
    def commitDir = file(parent.projectDir.toString() + "/src/core/main/resources/info")
    def commitFile = file("${commitDir}/commit.txt")

    outputs.upToDateWhen { task ->
        // Determine if the task is up to date based on the condition
        if (commitFile.exists()) {
            def existingCommitHash = commitFile.text.trim()
            return existingCommitHash == currentCommitHash
        }

        // If commit.txt doesn't exist, the task is not up to date
        return false
    }

    doLast {
        def commitDateTime = new Date().format('yyyy-MM-dd HH:mm:ss')
        def commitInfo = "${commitDateTime} - ${currentCommitHash}"

        def historyFile = file("${commitDir}/build_history.txt")

        // Ensure the directory exists
        commitDir.mkdirs()

        commitFile.text = currentCommitHash
        println "Git commit hash has been written to ${commitFile}"

        if (historyFile.exists()) {
            historyFile.append("\n$commitInfo")
        } else {
            historyFile.text = commitInfo
        }

        println "Git commit info has been appended to ${historyFile}"
    }
}



compileJava {
    dependsOn 'gitCommitResource'
}


compileJava {
    dependsOn 'gitCommitResource'
}

dependencies {
    runtimeOnly 'javax.persistence:javax.persistence-api:2.2'

    // db
    implementation 'com.mysql:mysql-connector-j'

    // data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework:spring-messaging:6.0.0'

    // jstl
    compileOnly 'jstl:jstl:1.2'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'

    // security
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // ssh
    implementation 'org.apache.sshd:sshd-core:2.+'
    implementation 'org.apache.sshd:sshd-sftp:2.+'

    // minecraft
    api 'com.mineaurion:api:SNAPSHOT'
    implementation 'io.github.fragland:MineStat:3.+'
    implementation 'io.github.MrGraversen:minecraft-rcon:0.+'
    //implementation "dev.jaqobb:namemcapi:2.+" // not actually available ...

    // discord
    api 'net.dv8tion:JDA:5.+'
    api 'club.minnced:discord-webhooks:0.+'

    // emoji
    api 'com.kcthota:emoji4j:6.+'

    // utility
    developmentOnly 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
}
